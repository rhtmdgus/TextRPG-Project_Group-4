#include "animation.h"
#include <stdio.h>

// 플레이어 모습 구현
char swordAttack[][12][12] = {
      {
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,'/',0},
      {0,0,0, 0, 'p', 0,0,0,0,'/',0,0},
      {0,0,0, '/', '|', '\\',0,0,'/',0,0,0},
      {0,0,0, '\\', '|', 0,'\\','x',0,0,0,0},
      {0,0,0, 0, '|', 0,'/',0,0,0,0,0},
      {0,0,0, '/', 0, '\\',0,0,0,0,0,0},
      {0,0,'/', 0, 0, 0,'\\',0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0}
      },
      {
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,'|',0,0,0},
      {0,0,0, 0, 0, 0,0,0,'|',0,0,0},
      {0,0,0, 0, 'p', '_','_','_','+',0,0,0},
      {0,0,0, '/', '|', 0,0,0,'|',0,0,0},
      {0,0,0, '\\', '|', 0,0,0,0,0,0,0},
      {0,0,0, 0, '|', 0,0,0,0,0,0,0},
      {0,0,0, '/', 0, '\\',0,0,0,0,0,0},
      {0,0,'/', 0, 0, 0,'\\',0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0}
      },
      {
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {'\\',0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,'\\',0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,'x', 0, 0, 0,0,0,0,0,0,0},
      {0,'p',0, '\\', 0, 0,0,0,0,0,0,0},
      {0,0,'\\', '/', 0, 0,0,0,0,0,0,0},
      {0,0,'/', '\\', 0, 0,0,0,0,0,0,0},
      {0,0,'|', 0, '\\', 0,0,0,0,0,0,0},
      {0,0,0, '/', 0, '\\',0,0,0,0,0,0},
      {0,0,'/', 0, 0, 0,'\\',0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0}
      },
      {
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,'|',0,0,0},
      {0,0,0, 0, 0, 0,0,0,'|',0,0,0},
      {0,0,0, 0, 'p', '_','_','_','+',0,0,0},
      {0,0,0, '/', '|', 0,0,0,'|',0,0,0},
      {0,0,0, '\\', '|', 0,0,0,0,0,0,0},
      {0,0,0, 0, '|', 0,0,0,0,0,0,0},
      {0,0,0, '/', 0, '\\',0,0,0,0,0,0},
      {0,0,'/', 0, 0, 0,'\\',0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0}
      },
      {
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,'/',0},
      {0,0,0, 0, 'p', 0,0,0,0,'/',0,0},
      {0,0,0, '/', '|', '\\',0,0,'/',0,0,0},
      {0,0,0, '\\', '|', 0,'\\','x',0,0,0,0},
      {0,0,0, 0, '|', 0,'/',0,0,0,0,0},
      {0,0,0, '/', 0, '\\',0,0,0,0,0,0},
      {0,0,'/', 0, 0, 0,'\\',0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0}
      }
};

char swordDamaged[][12][12] = {

   {
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,'/',0},
      {0,0,0, 0, 'p', 0,0,0,0,'/',0,0},
      {0,0,0, '/', '|', '\\',0,0,'/',0,0,0},
      {0,0,0, '\\', '|', 0,'\\','x',0,0,0,0},
      {0,0,0, 0, '|', 0,'/',0,0,0,0,0},
      {0,0,0, '/', 0, '\\',0,0,0,0,0,0},
      {0,0,'/', 0, 0, 0,'\\',0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0}
      },
      {
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 'p', 0, 0,0,0,'/',0,0,0},
      {0,0,'/', '|', '\\', 0,0,'/',0,0,0,0},
      {'(','(','\\', '|', 0, '\\','x',0,')',')',0,0},
      {0,0,0, '|', 0, '/',0,0,0,0,0,0},
      {0,0,'/', 0, '\\', 0,0,0,0,0,0,0},
      {0,'/',0, 0, 0, '\\',0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0}
      },
      {
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 'p',0,0,0,0,'/',0},
      {0,0,0, 0, '/', '|','\\',0,0,'/',0,0},
      {0,'(','(', 0, '\\', '|',0,'\\','x',0,')',')'},
      {0,0,0, 0, 0, '|',0,'/',0,0,0,0},
      {0,0,0,0, '/', 0,'\\',0,0,0,0,0},
      {0,0,0, '/', 0, 0,0,'\\',0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0}
      },
      {
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 'p', 0, 0,0,0,'/',0,0,0},
      {0,0,'/', '|', '\\', 0,0,'/',0,0,0,0},
      {'(','(','\\', '|', 0, '\\','x',0,')',')',0,0},
      {0,0,0, '|', 0, '/',0,0,0,0,0,0},
      {0,0,'/', 0, '\\', 0,0,0,0,0,0,0},
      {0,'/',0, 0, 0, '\\',0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0}
      },
      {
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,'/',0},
      {0,0,0, 0, 'p', 0,0,0,0,'/',0,0},
      {0,0,0, '/', '|', '\\',0,0,'/',0,0,0},
      {0,0,0, '\\', '|', 0,'\\','x',0,0,0,0},
      {0,0,0, 0, '|', 0,'/',0,0,0,0,0},
      {0,0,0, '/', 0, '\\',0,0,0,0,0,0},
      {0,0,'/', 0, 0, 0,'\\',0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0},
      {0,0,0, 0, 0, 0,0,0,0,0,0,0}
      },
};

char arrowAttack[][12][12] = {
      {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0,0,0,'|','\\',0,0,0,0},
      {0,0, 0, 0, 'p',0,'|',0,'|',0,0,0},
      {0,0, 0, '/', '|','\\','|',0,'|',0,0,0},
      {0,0, 0, '\\', '|',0,'\\',0,'|',0,0,0},
      {0, 0, 0, 0, '|', 0, '|', 0, '|', 0, 0, 0},
      {0,0, 0, '/', 0,'\\','|','/',0,0,0,0},
      {0,0, '/', 0, 0,0,'\\',0,0,0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      },
      {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0,0,0,'|','\\',0,0,0,0},
      {0,0, 0, 0, 'p',0,'|',0,'|',0,0,0},
      {0,0, 0, 0, '|','-','+','-','+','-','>',0},
      {0,0, 0, 0, '|',0,'|',0,'|',0,0,0},
      {0, 0, 0, 0, '|', 0, '|', '/', 0, 0, 0, 0},
      {0,0, 0, '/', 0,'\\',0,0,0,0,0,0},
      {0,0, '/', 0, 0,0,'\\',0,0,0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      },
      {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0,0,0,'/','\\',0,0,0,0},
      {0,0, 0, 0, 'p','/',0,0,'|',0,0,0},
      {0,0, 0, '<', '|','-','+','-','+','>',0,0},
      {0,0, 0, 0, '|','\\',0,0,'|',0,0,0},
      {0, 0, 0, 0, '|', 0, '\\', '/', 0, 0, 0, 0},
      {0,0, 0, '/', 0,'\\',0,0,0,0,0,0},
      {0,0, '/', 0, 0,0,'\\',0,0,0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      },
      {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0,0,0,'|','\\',0,0,0,0},
      {0,0, 0, 0, 'p',0,'|',0,'|',0,0,0},
      {0,0, 0, '/', '|','-','+',0,'+','-','-','>'},
      {0,0, 0, '|', '|',0,'|',0,'|',0,0,0},
      {0, 0, 0, 0, '|', 0, '|', '/', 0, 0, 0, 0},
      {0,0, 0, '/', 0,'\\',0,0,0,0,0,0},
      {0,0, '/', 0, 0,0,'\\',0,0,0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      },
      {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0,0,0,'|','\\',0,0,0,0},
      {0,0, 0, 0, 'p',0,'|',0,'|',0,0,0},
      {0,0, 0, '/', '|','-','+',0,'|',0,0,0},
      {0,0, '/', 0, '|',0,'|',0,'|',0,0,0},
      {0, 0, 0, 0, '|', 0, '|', '/', 0, 0, 0, 0},
      {0,0, 0, '/', 0,'\\',0,0,0,0,0,0},
      {0,0, '/', 0, 0,0,'\\',0,0,0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      }
};
char arrowDamaged[][12][12] = {

   {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0,0,0,'|','\\',0,0,0,0},
      {0,0, 0, 0, 'p',0,'|',0,'|',0,0,0},
      {0,0, 0, '/', '|','\\','|',0,'|',0,0,0},
      {0,'(', '(', '\\', '|',0,'\\',0,'|',')',')',0},
      {0, 0, 0, 0, '|', 0, '|', 0, '|', 0, 0, 0},
      {0,0, 0, '/', 0,'\\','|','/',0,0,0,0},
      {0,0, '/', 0, 0,0,'\\',0,0,0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      },
      {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0,0,'|','\\',0,0,0,0,0},
      {0,0, 0, 'p', 0,'|',0,'|',0,0,0,0},
      {0,0, '/', '|', '\\','|',0,'|',0,0,0,0},
      {'(','(', '\\', '|', 0,'\\',0,'|',')',')',0,0},
      {0, 0, 0, '|', 0, '|', 0, '|', 0, 0, 0, 0},
      {0,0, '/', 0, '\\','|','/',0,0,0,0,0},
      {0,'/', 0, 0, 0,'\\',0,0,0,0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      },
      {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0,0,0,0,'|','\\',0,0,0},
      {0,0, 0, 0, 0,'p',0,'|',0,'|',0,0},
      {0,0, 0, 0, '/','|','\\','|',0,'|',0,0},
      {0,0, '(', '(', '\\','|',0,'\\',0,'|',')',')'},
      {0, 0, 0, 0, 0, '|', 0, '|', 0, '|', 0, 0},
      {0,0, 0, 0, '/',0,'\\','|','/',0,0,0},
      {0,0, 0, '/', 0,0,0,'\\',0,0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      },
      {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0,0,'|','\\',0,0,0,0,0},
      {0,0, 0, 'p', 0,'|',0,'|',0,0,0,0},
      {0,0, '/', '|', '\\','|',0,'|',0,0,0,0},
      {'(','(', '\\', '|', 0,'\\',0,'|',')',')',0,0},
      {0, 0, 0, '|', 0, '|', 0, '|', 0, 0, 0, 0},
      {0,0, '/', 0, '\\','|','/',0,0,0,0,0},
      {0,'/', 0, 0, 0,'\\',0,0,0,0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      },
      {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0,0,0,'|','\\',0,0,0,0},
      {0,0, 0, 0, 'p',0,'|',0,'|',0,0,0},
      {0,0, 0, '/', '|','\\','|',0,'|',0,0,0},
      {0, 0 , 0 , '\\', '|',0,'\\',0,'|',0 ,0 ,0},
      {0, 0, 0, 0, '|', 0, '|', 0, '|', 0, 0, 0},
      {0,0, 0, '/', 0,'\\','|','/',0,0,0,0},
      {0,0, '/', 0, 0,0,'\\',0,0,0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      },
};

char spearAttack[][12][12] =
{

 {
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,'|',0,0,0,0,0},
    {0,0, 0, 0, 0,'-','+','-',0,0,0,0},
    {0,0, 0, 0, 'P',0,'|',0,0,0,0,0},
    {0,0, 0, '/', '|','\\','|',0,0,0,0,0},
    {0,0, 0, '\\', '|',0,'|',0,0,0,0,0},
    {0,0, 0, 0, '|',0,'|',0,0,0,0,0},
    {0,0, 0, '/', 0,'\\','|',0,0,0,0,0},
    {0, 0, '/', 0,0,0,'\\',0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },
    {
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 'P',0,0,0,'\\','/',0,0},
    {0,0, 0, '/', '|','\\',0,0,'/','\\',0,0},
    {0,0, 0, '\\', '|',0,'\\','/',0,0,0,0},
    {0,0, 0, 0, '|',0,'/',0,0,0,0,0},
    {0,0, 0, '/', 0,'X',0,0,0,0,0,0},
    {0, 0, '/', 0,'/',0,'\\',0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },
    {
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 'P',0,0,0,0,0,0,0},
    {0,0, 0, '/', '|','\\',0,'|',0,0,0,0},
    {'-','-', '-', '-', '+','-','-','+','-','-',0,0},
    {0,0, 0, 0, '|',0,0,'|',0,0,0,0},
    {0,0, 0, '/', 0,'\\',0,0,0,0,0,0},
    {0, 0, '/', 0,0,0,'\\',0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },
    {
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 'P',0,0,0,0,0,0,0},
    {0,0, 0, '<', '|','\\',0,0,0,'|',0,0},
    {0,0, '-', '-', '+','-','-','-','-','+','-','-'},
    {0,0, 0, 0, '|',0,0,0,0,'|',0,0},
    {0,0, 0, '/', 0,'\\',0,0,0,0,0,0},
    {0, 0, '/', 0,0,0,'\\',0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },
    {
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 'P',0,0,0,0,0,0,0},
    {0,0, 0, '/', '|','\\',0,'|',0,0,0,0},
    {'-','-', '-', '-', '+','-','-','+','-','-',0,0},
    {0,0, 0, 0, '|',0,0,'|',0,0,0,0},
    {0,0, 0, '/', 0,'\\',0,0,0,0,0,0},
    {0, 0, '/', 0,0,0,'\\',0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },
    {
        {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 'P',0,0,0,'\\','/',0,0},
    {0,0, 0, '/', '|','\\',0,0,'/','\\',0,0},
    {0,0, '-', '\\', '|',0,'\\','/',0,0,0,0},
    {0,0, 0, 0, '|',0,'/',0,0,0,0,0},
    {0,0, 0, '/', 0,'X',0,0,0,0,0,0},
    {0, 0, '/', 0,'/',0,'\\',0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},

    },
    {
        {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,'|',0,0,0,0,0},
    {0,0, 0, 0, 0,'-','+','-',0,0,0,0},
    {0,0, 0, 0, 'P',0,'|',0,0,0,0,0},
    {0,0, 0, '/', '|','\\','|',0,0,0,0,0},
    {0,0, 0, '\\', '|',0,'|',0,0,0,0,0},
    {0,0, 0, 0, '|',0,'|',0,0,0,0,0},
    {0,0, 0, '/', 0,'\\','|',0,0,0,0,0},
    {0, 0, '/', 0,0,0,'\\',0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    }
};

char spearDamaged[][12][12] =
{

 {
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,'|',0,0,0,0,0},
    {0,0, 0, 0, 0,'-','+','-',0,0,0,0},
    {0,0, 0, 0, 'P',0,'|',0,0,0,0,0},
    {0,0, 0, '/', '|','\\','|',0,0,0,0,0},
    {0,0, 0, '\\', '|',0,'|',0,0,0,0,0},
    {0,0, 0, 0, '|',0,'|',0,0,0,0,0},
    {0,0, 0, '/', 0,'\\','|',0,0,0,0,0},
    {0, 0, '/', 0,0,0,'\\',0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },
    {
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,0,'|',0,0,0,0},
    {0,0, 0, 0, 0,0,'-','+','-',0,0,0},
    {0,0, 0, 0, 0,'P',0,'|',0,0,0,0},
    {0,0, 0, 0, '/','|','\\','|',0,0,0,0},
    {0,0, '(', '(', '\\','|',0,'|',')',')',0,0},
    {0,0, 0, 0, 0,'|',0,'|',0,0,0,0},
    {0,0, 0, 0, '/',0,'\\','|',0,0,0,0},
    {0, 0, 0, '/',0,0,0,'\\',0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },
    {
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,'|',0,0,0,0,0,0},
    {0,0, 0, 0, '-','+','-',0,0,0,0,0},
    {0,0, 0, 'P', 0,'|',0,0,0,0,0,0},
    {0,0, '/', '|', '\\','|',0,0,0,0,0,0},
    {'(','(', '\\', '|', 0,'|',')',')',0,0,0,0},
    {0,0, 0, '|', 0,'|',0,0,0,0,0,0},
    {0,0, '/', 0, '\\','|',0,0,0,0,0,0},
    {0, '/', 0, 0,0,'\\',0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },
    {
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,0,'|',0,0,0,0},
    {0,0, 0, 0, 0,0,'-','+','-',0,0,0},
    {0,0, 0, 0, 0,'P',0,'|',0,0,0,0},
    {0,0, 0, 0, '/','|','\\','|',0,0,0,0},
    {0,0, '(', '(', '\\','|',0,'|',')',')',0,0},
    {0,0, 0, 0, 0,'|',0,'|',0,0,0,0},
    {0,0, 0, 0, '/',0,'\\','|',0,0,0,0},
    {0, 0, 0, '/',0,0,0,'\\',0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },
    {
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,'|',0,0,0,0,0},
    {0,0, 0, 0, 0,'-','+','-',0,0,0,0},
    {0,0, 0, 0, 'P',0,'|',0,0,0,0,0},
    {0,0, 0, '/', '|','\\','|',0,0,0,0,0},
    {0,0, 0, '\\', '|',0,'|',0,0,0,0,0},
    {0,0, 0, 0, '|',0,'|',0,0,0,0,0},
    {0,0, 0, '/', 0,'\\','|',0,0,0,0,0},
    {0, 0, '/', 0,0,0,'\\',0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },

};

char shieldAttack[][12][12] = {
   {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0,0, 0,0,'_','_','_',0,0,0},
      {0,0, 0, 0, 'p',0,'|','|','|',0,0,0},
      {0,0, 0, '/', '|','\\','|','+','|',0,0,0},
      {0, 0,0, '\\', '|',0,'|','|','|',0,0,0},
      {0,0, 0, 0, '|',0,'|','|','|',0,0,0},
      {0,0, 0, '/', 0,'\\','|','|','|',0,0,0},
      {0,0, '/', 0, 0,0,'\\','-','-',0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      },
      {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, '/', '\\', 0, 0, 0, 0},
      {0, 0, 0,0, 0,'/','\\',0,'\\',0,0,0},
      {0,0, 0, 0, 'p','\\',0,'x',0,'\\',0,0},
      {0,0, 0, '/', '|','/','\\',0,'\\',0,'\\',0},
      {0, 0,0, '\\', '|',0,0,'\\',0,'\\','/',0},
      {0, 0, 0, 0, '|', 0, 0, 0, '\\', '/', 0, 0},
      {0,0, 0, '/', 0,'\\',0,0,0,0,0,0},
      {0,0, '/', 0, 0,0,'\\',0,0,0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      },
      {
      {0, 0, '_', '_', '_', '_', '_', '_', '_', '_', '_', 0},
      {0, 0, '|', 0, 0, 0,0,0,0,0, '|', 0},
      {0, 0, '|','-', '-', '+', '-', '-', '-', '-', '|', 0},
      {0, 0, '-','-', '-','-','-','-','-','-','-',0},
      {0,0, 0, 0, 'p',0,'|',0,0,0,0,0},
      {0,0, 0, '/', '|','/',0,0,0,0,0,0},
      {0, 0,0, '\\', '|',0,0,0,0,0,0,0},
      {0, 0, 0, 0, '|', 0, 0, 0, 0, 0, 0, 0},
      {0,0, 0, '/', 0,'\\',0,0,0,0,0,0},
      {0,0, '/', 0, 0,0,'\\',0,0,0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      },
      {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, '/', '\\', 0, 0, 0, 0},
      {0, 0, 0,0, 0,'/','\\',0,'\\',0,0,0},
      {0,0, 0, 0, 'p','\\',0,'x',0,'\\',0,0},
      {0,0, 0, '/', '|','/','\\',0,'\\',0,'\\',0},
      {0, 0,0, '\\', '|',0,0,'\\',0,'\\','/',0},
      {0, 0, 0, 0, '|', 0, 0, 0, '\\', '/', 0, 0},
      {0,0, 0, '/', 0,'\\',0,0,0,0,0,0},
      {0,0, '/', 0, 0,0,'\\',0,0,0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      },
      {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0,0, 0,0,'_','_','_',0,0,0},
      {0,0, 0, 0, 'p',0,'|','|','|',0,0,0},
      {0,0, 0, '/', '|','\\','|','+','|',0,0,0},
      {0, 0,0, '\\', '|',0,'|','|','|',0,0,0},
      {0,0, 0, 0, '|',0,'|','|','|',0,0,0},
      {0,0, 0, '/', 0,'\\','|','|','|',0,0,0},
      {0,0, '/', 0, 0,0,'\\','-','-',0,0,0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      },
};

char sheildAttack[][12][12] =
{

{
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'_','_','_',0, 0,0,0,0,0,0,0,0},
    {'|','|','|', 0, 'P',0,0,0,0,'/',0,0},
    {'|','+','|', '/', '|','\\',0,0,'/',0,0,0},
    {'|','|','|', 0, '|',0,'\\','X',0,0,0,0},
    {'|','|','|', 0, '|',0,'/',0,0,0,0,0},
    {'|','|','|', '/', 0,'\\',0,0,0,0,0,0},
    {'-','-', '/', 0, 0,0,'\\',0,0,0,0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, '|', 0, 0, 0},
    {'_','_','_',0, 0,0,0,0,'|',0,0,0},
    {'|','|','|', 0, 'P','_','_','_','+',0,0},
    {'|','+','|', '/', '|',0,0,0,'|',0,0,0},
    {'|','|','|', 0, '|',0,0,0,0,0,0,0},
    {'|','|','|', 0, '|',0,0,0,0,0,0,0},
    {'|','|','|', '/', 0,'\\',0,0,0,0,0,0},
    {'-','-', '/', 0, 0,0,'\\',0,0,0,0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0,0,0, 0, 0, 0,0,0,0,0,0,0},
    {0,0,0, '\\', 0, 0,0,0,0,0,0,0},
    {'_','_','_', 0, '\\', 0,0,0,0,0,0,0},
    {'|','|','|','P',0, 'X',0,0,0,0,0},
    {'|','+','|', '\\', 0,'/','\\',0,0,0,0,0},
    {'|','|','|', '/', '\\',0,0,0,0,0,0,0},
    {'|','|','|', 0, '/',0,0,0,0,0,0,0},
    {'|','|','|', '/', 0,'\\',0,0,0,0,0,0},
    {'-','-', '/', 0, 0,0,'\\',0,0,0,0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, '|', 0, 0, 0},
    {'_','_','_',0, 0,0,0,0,'|',0,0,0},
    {'|','|','|', 0, 'P','_','_','_','+',0,0},
    {'|','+','|', '/', '|',0,0,0,'|',0,0,0},
    {'|','|','|', 0, '|',0,0,0,0,0,0,0},
    {'|','|','|', 0, '|',0,0,0,0,0,0,0},
    {'|','|','|', '/', 0,'\\',0,0,0,0,0,0},
    {'-','-', '/', 0, 0,0,'\\',0,0,0,0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {'_','_','_',0, 0,0,0,0,0,0,0,0},
    {'|','|','|', 0, 'P',0,0,0,0,'/',0,0},
    {'|','+','|', '/', '|','\\',0,0,'/',0,0,0},
    {'|','|','|', 0, '|',0,'\\','X',0,0,0,0},
    {'|','|','|', 0, '|',0,'/',0,0,0,0,0},
    {'|','|','|', '/', 0,'\\',0,0,0,0,0,0},
    {'-','-', '/', 0, 0,0,'\\',0,0,0,0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },

};

char sheildDamaged[][12][12] =
{

{
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0,0, 0,0,'_','_','_',0,0,0},
    {0,0, 0, 0, 'p',0,'|','|','|',0,0,0},
    {0,'\\', 0, '/', '|','\\','|','+','|',0,0,0},
    {0, 0,'X', 0, '|',0,'|','|','|',0,0,0},
    {0,0, 0, '\\', '|',0,'|','|','|',0,0,0},
    {0,0, 0, '/', '\\','\\','|','|','|',0,0,0},
    {0,0, '/', 0, 0,'/','-','-','-',0,0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0,0, 0,0,0,'_','_','_',0,0},
    {0,0, 0, 0, 0,'P',0,'|','|','|',0,0},
    {0,0, '\\', 0, '/','|','\\','|','+','|',0,0},
    {0, 0,0, 'X', 0,'|',0,'|','|','|',0,0},
    {0,0, '(', '(', '\\','|',0,'|','|','|',')',')'},
    {0,0, 0, 0, '/','\\','\\','|','|','|',0,0},
    {0,0, 0, '/', 0,0,'/','-','-','-',0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0,0, 0,'_','_','_',0,0,0,0},
    {0,0, 0, 'P', 0,'|','|','|',0,0,0,0},
    {'\\',0, '/', '|', '\\','|','+','|',0,0,0,0},
    {0, 'X',0, '|', 0,'|','|','|',0,0,0,0},
    {'(','(', '\\', '|', 0,'|','|','|',')',')',0,0},
    {0,0, '/', '\\', '\\','|','|','|',0,0,0,0},
    {0,'/', 0, 0, '/','-','-','-',0,0,0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0,0, 0,0,0,'_','_','_',0,0},
    {0,0, 0, 0, 0,'P',0,'|','|','|',0,0},
    {0,0, '\\', 0, '/','|','\\','|','+','|',0,0},
    {0, 0,0, 'X', 0,'|',0,'|','|','|',0,0},
    {0,0, '(', '(', '\\','|',0,'|','|','|',')',')'},
    {0,0, 0, 0, '/','\\','\\','|','|','|',0,0},
    {0,0, 0, '/', 0,0,'/','-','-','-',0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0,0, 0,0,'_','_','_',0,0,0},
    {0,0, 0, 0, 'p',0,'|','|','|',0,0,0},
    {0,'\\', 0, '/', '|','\\','|','+','|',0,0,0},
    {0, 0,'X', 0, '|',0,'|','|','|',0,0,0},
    {0,0, 0, '\\', '|',0,'|','|','|',0,0,0},
    {0,0, 0, '/', '\\','\\','|','|','|',0,0,0},
    {0,0, '/', 0, 0,'/','-','-','-',0,0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },

};



char enemySwordAttack[][12][12] =
{
   {
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,'\\',0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,'\\',0,0,0,0,'E',0,0,0,0},
   {0,0,0,'\\',0,0,'/','|','\\',0,0,0},
   {0,0,0,0,'x','/',0,'|','/',0,0,0},
   {0,0,0,0,0,'\\',0,'|',0,0,0,0},
   {0,0,0,0,0,0,'/',0,'\\',0,0,0},
   {0,0,0,0,0,'/',0,0,0,'\\',0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0}
   },
   {
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,0, '|', 0, 0,0,0,0,0,0,0},
   {0,0,0, '|', 0, 0,0,0,0,0,0,0},
   {0,0,0, '+','_','_','_','E',0,0,0,0},
   {0,0,0, '|', 0, 0,0,'|','\\',0,0,0},
   {0,0,0, 0, 0, 0,0,'|','/',0,0,0},
   {0,0,0, 0, 0, 0,0,'|',0,0,0,0},
   {0,0,0, 0, 0, 0,'/', 0, '\\',0,0,0},
   {0,0,0, 0, 0, '/',0,0,0,'\\',0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0}
   },
   {
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,'/'},
   {0,0,0, 0, 0, 0,0,0,0,0,'/',0},
   {0,0,0, 0, 0, 0,0,0,0,'x',0,0},
   {0,0,0, 0, 0, 0,0,0,'/',0,'E',0},
   {0,0,0, 0, 0, 0,0,0,'\\','/',0,0},
   {0,0,0, 0, 0, 0,0,0,'/','\\',0,0},
   {0,0,0, 0, 0, 0,0,'/',0,0,'\\',0},
   {0,0,0, 0, 0, 0,'/',0,'\\',0,0,0},
   {0,0,0, 0, 0, '/',0,0,0,'\\',0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0}
   },
   {
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,0, '|', 0, 0,0,0,0,0,0,0},
   {0,0,0, '|', 0, 0,0,0,0,0,0,0},
   {0,0,0, '+','_','_','_','E',0,0,0,0},
   {0,0,0, '|', 0, 0,0,'|','\\',0,0,0},
   {0,0,0, 0, 0, 0,0,'|','/',0,0,0},
   {0,0,0, 0, 0, 0,0,'|',0,0,0,0},
   {0,0,0, 0, 0, 0,'/', 0, '\\',0,0,0},
   {0,0,0, 0, 0, '/',0,0,0,'\\',0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0}
   },
   {
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,'\\',0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,'\\',0,0,0,0,'E',0,0,0,0},
   {0,0,0,'\\',0,0,'/','|','\\',0,0,0},
   {0,0,0,0,'x','/',0,'|','/',0,0,0},
   {0,0,0,0,0,'\\',0,'|',0,0,0,0},
   {0,0,0,0,0,0,'/',0,'\\',0,0,0},
   {0,0,0,0,0,'/',0,0,0,'\\',0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0},
   {0,0,0, 0, 0, 0,0,0,0,0,0,0}
   }
};

char enemySwordDamaged[][12][12] =
{
   {
    {0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,'\\',0, 0, 0, 0,0,0,0,0,0,0},
{0,0,'\\',0,0,0,0,'E',0,0,0,0},
{0,0,0,'\\',0,0,'/','|','\\',0,0,0},
{0,0,0,0,'x','/',0,'|','/',0,0,0},
{0,0,0,0,0,'\\',0,'|',0,0,0,0},
{0,0,0,0,0,0,'/',0,'\\',0,0,0},
{0,0,0,0,0,'/',0,0,0,'\\',0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0}
   },
   {
    {0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,'\\',0, 0, 0, 0,0,0,0,0,0},
{0,0,0,'\\',0,0,0,0,'E',0,0,0},
{0,0,0,0,'\\',0,0,'/','|','\\',0,0},
{0,0,0,'(','(','x','/',0,'|','/',')',')'},
{0,0,0,0,0,0,'\\',0,'|',0,0,0},
{0,0,0,0,0,0,0,'/',0,'\\',0,0},
{0,0,0,0,0,0,'/',0,0,0,'\\',0},
{0,0,0, 0, 0, 0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0}
   },
   {
    {0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0},
{'\\',0, 0, 0, 0,0,0,0,0,0,0,0},
{0,'\\',0,0,0,0,'E',0,0,0,0,0},
{0,0,'\\',0,0,'/','|','\\',0,0,0,0},
{0,'(','(','x','/',0,'|','/',')',')',0,0},
{0,0,0,0,'\\',0,'|',0,0,0,0,0},
{0,0,0,0,0,'/',0,'\\',0,0,0,0},
{0,0,0,0,'/',0,0,0,'\\',0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0}
   },
   {
 {0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,'\\',0, 0, 0, 0,0,0,0,0,0},
{0,0,0,'\\',0,0,0,0,'E',0,0,0},
{0,0,0,0,'\\',0,0,'/','|','\\',0,0},
{0,0,0,'(','(','x','/',0,'|','/',')',')'},
{0,0,0,0,0,0,'\\',0,'|',0,0,0},
{0,0,0,0,0,0,0,'/',0,'\\',0,0},
{0,0,0,0,0,0,'/',0,0,0,'\\',0},
{0,0,0, 0, 0, 0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0}
   },
   {
 {0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,'\\',0, 0, 0, 0,0,0,0,0,0,0},
{0,0,'\\',0,0,0,0,'E',0,0,0,0},
{0,0,0,'\\',0,0,'/','|','\\',0,0,0},
{0,0,0,0,'x','/',0,'|','/',0,0,0},
{0,0,0,0,0,'\\',0,'|',0,0,0,0},
{0,0,0,0,0,0,'/',0,'\\',0,0,0},
{0,0,0,0,0,'/',0,0,0,'\\',0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0},
{0,0,0, 0, 0, 0,0,0,0,0,0,0}
   }
};

char enemySpearAttack[][12][12] =
{

{
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,'|',0,0,0,0,0,0},
{0,0, 0, 0, '-','+','-',0,0,0,0,0},
{0,0, 0, 0, 0,'|',0,'E',0,0,0,0},
{0,0, 0, 0, 0,'|','/','|','\\',0,0,0},
{0,0, 0, 0, 0,'|',0,'|','/',0,0,0},
{0,0, 0, 0, 0,'|',0,'|',0,0,0,0},
{0,0, 0, 0, 0,'|','/',0,'\\',0,0,0},
{0, 0, 0, 0,0,'/',0,0,0,'\\',0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
},
{
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,0,0,0,0,0,0,0},
{0,0, '\\', '/', 0,0,0,'E',0,0,0,0},
{0,0, '/', '\\', 0,0,'/','|','\\',0,0,0},
{0,0, 0, 0, '\\','/',0,'|','/',0,0,0},
{0,0, 0, 0, 0,'\\',0,'|',0,0,0,0},
{0,0, 0, 0, 0,0,'X',0,'\\',0,0,0},
{0, 0, 0, 0,0,'/',0,'\\',0,'\\',0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
},
{
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,0,0,'E',0,0,0,0},
{0,0, 0, 0, '|',0,'/','|','\\',0,0,0},
{0,0, '-', '-', '+','-','-','+','-','-','-','-'},
{0,0, 0, 0, '|',0,0,'|',0,0,0,0},
{0,0, 0, 0, 0,0,'/',0,'\\',0,0,0},
{0, 0, 0, 0,0,'/',0,0,0,'\\',0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
},
{
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,0,0,'E',0,0,0,0},
{0,0, '|', 0, 0,0,'/','|','>',0,0,0},
{'-','-', '+', '-', '-','-','-','+','-','-','-','-'},
{0,0, '|', 0, 0,0,0,'|',0,0,0,0},
{0,0, 0, 0, 0,0,'/',0,'\\',0,0,0},
{0, 0, 0, 0,0,'/',0,0,0,'\\',0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
},
{
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,0,0,'E',0,0,0,0},
{0,0, 0, 0, '|',0,'/','|','\\',0,0,0},
{0,0, '-', '-', '+','-','-','+','-','-','-','-'},
{0,0, 0, 0, '|',0,0,'|',0,0,0,0},
{0,0, 0, 0, 0,0,'/',0,'\\',0,0,0},
{0, 0, 0, 0,0,'/',0,0,0,'\\',0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
},
{
   {0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,0,0,0,0,0,0,0},
{0,0, '\\', '/', 0,0,0,'E',0,0,0,0},
{0,0, '/', '\\', 0,0,'/','|','\\',0,0,0},
{0,0, 0, 0, '\\','/',0,'|','/',0,0,0},
{0,0, 0, 0, 0,'\\',0,'|',0,0,0,0},
{0,0, 0, 0, 0,0,'X',0,'\\',0,0,0},
{0, 0, 0, 0,0,'/',0,'\\',0,'\\',0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},

},
{
   {0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0,0, 0, 0, 0,'|',0,0,0,0,0,0},
{0,0, 0, 0, '-','+','-',0,0,0,0,0},
{0,0, 0, 0, 0,'|',0,'E',0,0,0,0},
{0,0, 0, 0, 0,'|','/','|','\\',0,0,0},
{0,0, 0, 0, 0,'|',0,'|','/',0,0,0},
{0,0, 0, 0, 0,'|',0,'|',0,0,0,0},
{0,0, 0, 0, 0,'|','/',0,'\\',0,0,0},
{0, 0, 0, 0,0,'/',0,0,0,'\\',0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
{0, 0, 0, 0,0,0,0,0,0,0,0,0},
}

};

char enemySpearDamaged[][12][12] =
{

 {
   {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,'|',0,0,0,0,0,0},
    {0,0, 0, 0, '-','+','-',0,0,0,0,0},
    {0,0, 0, 0, 0,'|',0,'E',0,0,0,0},
    {0,0, 0, 0, 0,'|','/','|','\\',0,0,0},
    {0,0, 0, 0, 0,'|',0,'|','/',0,0,0},
    {0,0, 0, 0, 0,'|',0,'|',0,0,0,0},
    {0,0, 0, 0, 0,'|','/',0,'\\',0,0,0},
    {0, 0, 0, 0,0,'/',0,0,0,'\\',0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },
    {
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,'|',0,0,0,0,0},
    {0,0, 0, 0, 0,'-','+','-',0,0,0,0},
    {0,0, 0, 0, 0,0,'|',0,'E',0,0,0},
    {0,0, 0, 0, 0,0,'|','/','|','\\',0,0},
    {0,0, 0, 0, '(','(','|',0,'|','/',')',')'},
    {0,0,0, 0, 0, 0,'|',0,'|',0,0,0},
    {0,0,0, 0, 0, 0,'|','/',0,'\\',0,0},
    {0,0, 0, 0, 0,0,'/',0,0,0,'\\',0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },
    {
   {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,'|',0,0,0,0,0,0,0},
    {0, 0, 0, '-','+','-',0,0,0,0,0,0},
    {0, 0, 0, 0,'|',0,'E',0,0,0,0,0},
    {0, 0, 0, 0,'|','/','|','\\',0,0,0,0},
    {0, 0, '(', '(','|',0,'|','/',')',')',0,0},
    {0, 0, 0, 0,'|',0,'|',0,0,0,0,0},
    {0, 0, 0, 0,'|','/',0,'\\',0,0,0,0},
    { 0, 0, 0,0,'/',0,0,0,'\\',0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },
    {
      {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,0,'|',0,0,0,0,0},
    {0,0, 0, 0, 0,'-','+','-',0,0,0,0},
    {0,0, 0, 0, 0,0,'|',0,'E',0,0,0},
    {0,0, 0, 0, 0,0,'|','/','|','\\',0,0},
    {0,0, 0, 0, '(','(','|',0,'|','/',')',')'},
    {0,0,0, 0, 0, 0,'|',0,'|',0,0,0},
    {0,0,0, 0, 0, 0,'|','/',0,'\\',0,0},
    {0,0, 0, 0, 0,0,'/',0,0,0,'\\',0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },
    {
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0,0, 0, 0, 0,'|',0,0,0,0,0,0},
    {0,0, 0, 0, '-','+','-',0,0,0,0,0},
    {0,0, 0, 0, 0,'|',0,'E',0,0,0,0},
    {0,0, 0, 0, 0,'|','/','|','\\',0,0,0},
    {0,0, 0, 0, 0,'|',0,'|','/',0,0,0},
    {0,0, 0, 0, 0,'|',0,'|',0,0,0,0},
    {0,0, 0, 0, 0,'|','/',0,'\\',0,0,0},
    {0, 0, 0, 0,0,'/',0,0,0,'\\',0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    {0, 0, 0, 0,0,0,0,0,0,0,0,0},
    },

};


char enemyArrowAttack[][12][12] =
{
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0,'/','|',0,0,0,0,0,0},
    {0,0, 0, '|', 0,'|',0,'E',0,0,0,0},
    {0,0, 0, '|', 0,'|','/','|','\\',0,0,0},
    {0,0, 0, '|', 0,'/',0,'|','/',0,0,0},
    {0, 0, 0, '|', 0, '|', 0, '|', 0, 0, 0, 0},
    {0,0, 0, 0, '\\','|','/',0,'\\',0,0,0},
    {0,0, 0, 0, 0,'/',0,0,0,'\\',0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0,'/','|',0,0,0,0,0,0},
    {0,0, 0, '|', 0,'|',0,'E',0,0,0,0},
    {0,'<', '-', '+', '-','+','-','|',0,0,0,0},
    {0,0, 0, '|', 0,'|',0,'|',0,0,0,0},
    {0, 0, 0, 0, '\\', '|', 0, '|', 0, 0, 0, 0},
    {0,0, 0, 0, 0,0,'/',0,'\\',0,0,0},
    {0,0, 0, 0, 0,'/',0,0,0,'\\',0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0,'/','\\',0,0,0,0,0,0},
    {0,0, 0, '|', 0,0,'\\','E',0,0,0,0},
    {0,0, '<', '+', '-','+','-','|','>',0,0,0},
    {0,0, 0, '|', 0,0,'/','|',0,0,0,0},
    {0, 0, 0, 0, '\\', '/', 0, '|', 0, 0, 0, 0},
    {0,0, 0, 0, 0,0,'/',0,'\\',0,0,0},
    {0,0, 0, 0, 0,'/',0,0,0,'\\',0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0,'/','|',0,0,0,0,0,0},
    {0,0, 0, '|', 0,'|',0,'E',0,0,0,0},
    {'<','-', '-', '+', '-','+','-','|','\\',0,0,0},
    {0,0, 0, '|', 0,'|',0,'|','|',0,0,0},
    {0, 0, 0, 0, '\\', '|', 0, '|', 0, 0, 0, 0},
    {0,0, 0, 0, 0,0,'/',0,'\\',0,0,0},
    {0,0, 0, 0, 0,'/',0,0,0,'\\',0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0,'/','|',0,0,0,0,0,0},
    {0,0, 0, '|', 0,'|',0,'E',0,0,0,0},
    {0,0, 0, '|', 0,'|','/','|','\\',0,0,0},
    {0,0, 0, '|', 0,'/',0,'|','/',0,0,0},
    {0, 0, 0, '|', 0, '|', 0, '|', 0, 0, 0, 0},
    {0,0, 0, 0, '\\','|','/',0,'\\',0,0,0},
    {0,0, 0, 0, 0,'/',0,0,0,'\\',0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    }
};

char enemyArrowDamaged[][12][12] =
{
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0,'/','|',0,0,0,0,0,0},
    {0,0, 0, '|', 0,'|',0,'E',0,0,0,0},
    {0,0, 0, '|', 0,'|','/','|','\\',0,0,0},
    {0,0, 0, '|', 0,'/',0,'|','/',0,0,0},
    {0, 0, 0, '|', 0, '|', 0, '|', 0, 0, 0, 0},
    {0,0, 0, 0, '\\','|','/',0,'\\',0,0,0},
    {0,0, 0, 0, 0,'/',0,0,0,'\\',0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0,0, 0, 0, 0,'/','|',0,0,0,0,0},
    {0,0,0, 0, '|', 0,'|',0,'E',0,0,0},
    {0,0,0, 0, '|', 0,'|','/','|','\\',0,0},
    {0,0,'(', '(', '|', 0,'/',0,'|','/',')',')'},
    {0,0, 0, 0, '|', 0, '|', 0, '|', 0, 0, 0},
    {0,0,0, 0, 0, '\\','|','/',0,'\\',0,0},
    {0,0,0, 0, 0, 0,'/',0,0,0,'\\',0},
    {0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 0, 0, 0,'/','|',0,0,0,0,0,0,0},
    {0, 0, '|', 0,'|',0,'E',0,0,0,0,0},
    {0, 0, '|', 0,'|','/','|','\\',0,0,0,0},
    {'(', '(', '|', 0,'/',0,'|','/',')',')',0,0},
    { 0, 0, '|', 0, '|', 0, '|', 0, 0, 0, 0,0},
    {0, 0, 0, '\\','|','/',0,'\\',0,0,0,0},
    {0, 0, 0, 0,'/',0,0,0,'\\',0,0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0,0, 0, 0, 0,'/','|',0,0,0,0,0},
    {0,0,0, 0, '|', 0,'|',0,'E',0,0,0},
    {0,0,0, 0, '|', 0,'|','/','|','\\',0,0},
    {0,0,'(', '(', '|', 0,'/',0,'|','/',')',')'},
    {0,0, 0, 0, '|', 0, '|', 0, '|', 0, 0, 0},
    {0,0,0, 0, 0, '\\','|','/',0,'\\',0,0},
    {0,0,0, 0, 0, 0,'/',0,0,0,'\\',0},
    {0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0,'/','|',0,0,0,0,0,0},
    {0,0, 0, '|', 0,'|',0,'E',0,0,0,0},
    {0,0, 0, '|', 0,'|','/','|','\\',0,0,0},
    {0,0, 0, '|', 0,'/',0,'|','/',0,0,0},
    {0, 0, 0, '|', 0, '|', 0, '|', 0, 0, 0, 0},
    {0,0, 0, 0, '\\','|','/',0,'\\',0,0,0},
    {0,0, 0, 0, 0,'/',0,0,0,'\\',0,0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    }
};

void printPlayer() {

    int playerWidth = 12;
    int playerHeight = 12;

    // 전투 맵의 중앙 계산
    int centerX = 15;
    int centerY = (MAP_HEIGHT - playerHeight) / 2;

    if (player.job == 1) 
    {
        setCursorPosition(centerX, centerY);
        for (int i = 0; i < 12; i++)
        {
            setCursorPosition(centerX, centerY + i);
            for (int j = 0; j < 12; j++)
            {
                if (swordAttack[0][i][j] == 0)
                {
                    printf(" ");
                }
                printf("%c", swordAttack[0][i][j]);
            }
            printf("\n");
        }
    }
    else if (player.job == 2)
    {
        setCursorPosition(centerX, centerY);
        for (int i = 0; i < 12; i++)
        {
            setCursorPosition(centerX, centerY + i);
            for (int j = 0; j < 12; j++)
            {
                if (arrowAttack[0][i][j] == 0)
                {
                    printf(" ");
                }
                printf("%c", arrowAttack[0][i][j]);
            }
            printf("\n");
        }
    }
    else if (player.job == 3)
    {
        setCursorPosition(centerX, centerY);
        for (int i = 0; i < 12; i++)
        {
            setCursorPosition(centerX, centerY + i);
            for (int j = 0; j < 12; j++)
            {
                if (spearAttack[0][i][j] == 0)
                {
                    printf(" ");
                }
                printf("%c", spearAttack[0][i][j]);
            }
            printf("\n");
        }
    }
    else if (player.job == 4)
    {
        setCursorPosition(centerX, centerY);
        for (int i = 0; i < 12; i++)
        {
            setCursorPosition(centerX, centerY + i);
            for (int j = 0; j < 12; j++)
            {
                if (sheildAttack[0][i][j] == 0)
                {
                    printf(" ");
                }
                printf("%c", sheildAttack[0][i][j]);
            }
            printf("\n");
        }
    }
}

void playerAttackAnimation()
{

    int playerWidth = 12;
    int playerHeight = 12;

    // 전투 맵의 중앙 계산
    int centerX = 15;
    int centerY = (MAP_HEIGHT - playerHeight) / 2;

    if (player.job == 1) // player.h의 player 구조체에 job 변수 추가 -> job == 1은 전사 job == 2는 궁수...
    {
        setCursorPosition(centerX, centerY); // 캐릭터 애니메이션을 전투 화면의 중앙에 출력
        // 애니메이션 출력
        for (int k = 0; k < 5; k++)
        {
            for (int i = 0; i < 12; i++)
            {
                setCursorPosition(centerX, centerY + i);
                for (int j = 0; j < 12; j++)
                {
                    if (swordAttack[k][i][j] == 0)
                    {
                        printf(" ");
                    }
                    printf("%c", swordAttack[k][i][j]);
                }
                printf("\n");
            }
            Sleep(50);
        }

    }
    else if (player.job == 2)
    {
        setCursorPosition(centerX, centerY); // 캐릭터 애니메이션을 전투 화면의 중앙에 출력
        // 애니메이션 출력
        for (int k = 0; k < 5; k++)
        {
            for (int i = 0; i < 12; i++)
            {
                setCursorPosition(centerX, centerY + i);
                for (int j = 0; j < 12; j++)
                {
                    if (arrowAttack[k][i][j] == 0)
                    {
                        printf(" ");
                    }
                    printf("%c", arrowAttack[k][i][j]);
                }
                printf("\n");
            }
            Sleep(50);
        }

    }
    else if (player.job == 3)
    {
        setCursorPosition(centerX, centerY); // 캐릭터 애니메이션을 전투 화면의 중앙에 출력
        // 애니메이션 출력
        for (int k = 0; k < 7; k++)
        {
            for (int i = 0; i < 12; i++)
            {
                setCursorPosition(centerX, centerY + i);
                for (int j = 0; j < 12; j++)
                {
                    if (spearAttack[k][i][j] == 0)
                    {
                        printf(" ");
                    }
                    printf("%c", spearAttack[k][i][j]);
                }
                printf("\n");
            }
            Sleep(50);
        }
    }
    else if (player.job == 4)
    {
        setCursorPosition(centerX, centerY); // 캐릭터 애니메이션을 전투 화면의 중앙에 출력
        // 애니메이션 출력
        for (int k = 0; k < 5; k++)
        {
            for (int i = 0; i < 12; i++)
            {
                setCursorPosition(centerX, centerY + i);
                for (int j = 0; j < 12; j++)
                {
                    if (sheildAttack[k][i][j] == 0)
                    {
                        printf(" ");
                    }
                    printf("%c", sheildAttack[k][i][j]);
                }
                printf("\n");
            }
            Sleep(50);
        }
    }

    

        // 화면을 지우지 않고 계속 애니메이션 진행
         // 잠시 대기 (애니메이션 효과를 위해)
}



void playerAttackedAnimation()
{

    int playerWidth = 12;
    int playerHeight = 12;

    // 전투 맵의 중앙 계산
    int centerX = 15;
    int centerY = (MAP_HEIGHT - playerHeight) / 2;

    if (player.job == 1) // player.h의 player 구조체에 job 변수 추가 -> job == 1은 전사 job == 2는 궁수...
    {
        setCursorPosition(centerX, centerY); // 캐릭터 애니메이션을 전투 화면의 중앙에 출력
        // 애니메이션 출력
        for (int k = 0; k < 5; k++)
        {
            for (int i = 0; i < 12; i++)
            {
                setCursorPosition(centerX, centerY + i);
                for (int j = 0; j < 12; j++)
                {
                    if (swordDamaged[k][i][j] == 0)
                    {
                        printf(" ");
                    }
                    printf("%c", swordDamaged[k][i][j]);
                }
                printf("\n");
            }
            Sleep(50);
        }
        
    }
    else if (player.job == 2)
    {
        setCursorPosition(centerX, centerY); // 캐릭터 애니메이션을 전투 화면의 중앙에 출력
        // 애니메이션 출력
        for (int k = 0; k < 5; k++)
        {
            for (int i = 0; i < 12; i++)
            {
                setCursorPosition(centerX, centerY + i);
                for (int j = 0; j < 12; j++)
                {
                    if (arrowDamaged[k][i][j] == 0)
                    {
                        printf(" ");
                    }
                    printf("%c", arrowDamaged[k][i][j]);
                }
                printf("\n");
            }
            Sleep(50);
        }


        // 화면을 지우지 않고 계속 애니메이션 진행
         // 잠시 대기 (애니메이션 효과를 위해)
    }
    else if (player.job == 3)
    {
        setCursorPosition(centerX, centerY); // 캐릭터 애니메이션을 전투 화면의 중앙에 출력
        // 애니메이션 출력
        for (int k = 0; k < 5; k++)
        {
            for (int i = 0; i < 12; i++)
            {
                setCursorPosition(centerX, centerY + i);
                for (int j = 0; j < 12; j++)
                {
                    if (spearDamaged[k][i][j] == 0)
                    {
                        printf(" ");
                    }
                    printf("%c", spearDamaged[k][i][j]);
                }
                printf("\n");
            }
            Sleep(50);
        }
    }
    else if (player.job == 4)
    {
        setCursorPosition(centerX, centerY); // 캐릭터 애니메이션을 전투 화면의 중앙에 출력
       // 애니메이션 출력
        for (int k = 0; k < 5; k++)
        {
            for (int i = 0; i < 12; i++)
            {
                setCursorPosition(centerX, centerY + i);
                for (int j = 0; j < 12; j++)
                {
                    if (sheildDamaged[k][i][j] == 0)
                    {
                        printf(" ");
                    }
                    printf("%c", sheildDamaged[k][i][j]);
                }
                printf("\n");
            }
            Sleep(50);
        }
    }

}

void printEnemy(Enemy* enemy)
{
    // 적의 유형에 따라 다르게 처리
    if (enemy->type == warrior)
    {
        // 잡졸 유형 출력
        for (int i = 0; i < 12; i++)
        {
            setCursorPosition(60, 10 + i);
            for (int j = 0; j < 12; j++)
            {
                if (enemySwordDamaged[0][i][j] == 0)
                {
                    printf(" ");
                }
                else
                {
                    printf("%c", enemySwordDamaged[0][i][j]);
                }
            }
            printf("\n");
        }
    }
    else if (enemy->type == spear)
    {
        // 창병 유형 출력
        for (int i = 0; i < 12; i++)
        {
            setCursorPosition(60, 10 + i);
            for (int j = 0; j < 12; j++)
            {
                if (enemySpearDamaged[0][i][j] == 0)  // 다른 배열 또는 시각적 데이터 사용
                {
                    printf(" ");
                }
                else
                {
                    printf("%c", enemySpearDamaged[0][i][j]);  // 창병의 데이터 출력
                }
            }
            printf("\n");
        }
    }
    else if (enemy->type == archor)
    {
        //활
        for (int i = 0; i < 12; i++)
        {
            setCursorPosition(60, 10 + i);
            for (int j = 0; j < 12; j++)
            {
                if (enemyArrowDamaged[0][i][j] == 0)  // 다른 배열 또는 시각적 데이터 사용
                {
                    printf(" ");
                }
                else
                {
                    printf("%c", enemyArrowDamaged[0][i][j]);  // 창병의 데이터 출력
                }
            }
            printf("\n");
        }
    }
    Sleep(50);  // 각 적을 출력한 후 일정 시간 지연
}





void enemyAttackedAnimation(Enemy* enemy)
{
    if (enemy->type == warrior) {
        for (int k = 0; k < 5; k++)
        {
            for (int i = 0; i < 12; i++)
            {
                setCursorPosition(60, 10 + i);
                for (int j = 0; j < 12; j++)
                {
                    if (enemySwordDamaged[k][i][j] == 0)
                    {
                        printf(" ");
                    }
                    printf("%c", enemySwordDamaged[k][i][j]);
                }
                printf("\n");
            }
            Sleep(50);
        }
    }
    else if (enemy->type == spear)
    {
        for (int k = 0; k < 5; k++)
        {
            for (int i = 0; i < 12; i++)
            {
                setCursorPosition(60, 10 + i);
                for (int j = 0; j < 12; j++)
                {
                    if (enemySpearDamaged[k][i][j] == 0)
                    {
                        printf(" ");
                    }
                    printf("%c", enemySpearDamaged[k][i][j]);
                }
                printf("\n");
            }
            Sleep(50);
        }
    }
    else if (enemy->type == archor)
    {
        for (int k = 0; k < 5; k++)
        {
            for (int i = 0; i < 12; i++)
            {
                setCursorPosition(60, 10 + i);
                for (int j = 0; j < 12; j++)
                {
                    if (enemyArrowDamaged[k][i][j] == 0)
                    {
                        printf(" ");
                    }
                    printf("%c", enemyArrowDamaged[k][i][j]);
                }
                printf("\n");
            }
            Sleep(50);
        }
    }

    
}




void enemyAttackAnimation(Enemy* enemy) {
    
    // 현재 적 배열에서 잡졸 유형 적을 탐색
    
   
    if (enemy->type == warrior) {
        for (int k = 0; k < 5; k++)
        {
            for (int i = 0; i < 12; i++)
            {
                setCursorPosition(60, 10 + i);
                for (int j = 0; j < 12; j++)
                {
                    if (enemySwordAttack[k][i][j] == 0)
                    {
                        printf(" ");
                    }
                    printf("%c", enemySwordAttack[k][i][j]);
                }
                printf("\n");
            }
            Sleep(50);
        }
    }
    else if (enemy->type == spear)
    {
        for (int k = 0; k < 7; k++)
        {
            for (int i = 0; i < 12; i++)
            {
                setCursorPosition(60, 10 + i);
                for (int j = 0; j < 12; j++)
                {
                    if (enemySpearAttack[k][i][j] == 0)
                    {
                        printf(" ");
                    }
                    printf("%c", enemySpearAttack[k][i][j]);
                }
                printf("\n");
            }
            Sleep(50);
        }
    }
    else if (enemy->type == archor)
    {
        for (int k = 0; k < 5; k++)
        {
            for (int i = 0; i < 12; i++)
            {
                setCursorPosition(60, 10 + i);
                for (int j = 0; j < 12; j++)
                {
                    if (enemyArrowAttack[k][i][j] == 0)
                    {
                        printf(" ");
                    }
                    printf("%c", enemyArrowAttack[k][i][j]);
                }
                printf("\n");
            }
            Sleep(50);
        }
    }
}
   

